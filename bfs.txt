#include <iostream>
#include<list>
using namespace std;
class Graph{
int v;
list<int>*adj;
public:
Graph(int v);
void add(int u,int v);
void BFS(int s);
};
Graph:: Graph(int v){
	this->v=v;
	this->adj=new list<int>[v];
}
void Graph::add(int u,int v){
	adj[u].push_back(v);
	adj[u].push_back(v);
} 
void Graph::BFS(int s){
int *mark=new int[v];
for(int i=0;i<v;i++){
	mark[i]=-1;
}
list<int>q;int d=0;
mark[s]=d;
list<int>:: iterator t;
q.push_back(s);int u;
while(!q.empty()){
	u=q.front();
	cout<<" u "<<u<<" : "<<mark[u]<<endl;
	q.pop_front();d++;
	for(t=adj[u].begin();t!=adj[u].end();++t){
		if(mark[*t]==-1){
			mark[*t]=d;
			q.push_back(*t);
		}
	}
}
}
int main() {
	Graph g(4);
	g.add(0,1);
	g.add(1,2);
	g.add(2,3);
	g.add(1,3);
	g.BFS(0);
	return 0;
}
