#include <bits/stdc++.h>

using namespace std;

int cost(vector<vector<int>> a,vector<vector<int>> b){
    int cost=0;
for(int i=0;i<3;i++){
    for(int j=0;j<3;j++){
        cost+=abs(a[i][j]-b[i][j]);
    }
}
return cost;
}


// Complete the formingMagicSquare function below.
int formingMagicSquare(vector<vector<int>> s) {
   vector< vector<vector<int> >> mag{{ { 8, 1, 6 }, 
                               { 3, 5, 7 }, 
                               { 4, 9, 2 } },

                               { { 4, 9, 2 }, 
                               { 3, 5, 7 }, 
                               { 8, 1, 6 } },

                               { { 4, 3, 8 }, 
                               { 9, 5, 1 }, 
                               { 2, 7, 6 } },

                               { { 2, 9, 4 }, 
                               { 7, 5, 3 }, 
                               { 6, 1, 8 } },

                               { { 6, 7, 2 }, 
                               { 1, 5, 9 }, 
                               { 8, 3, 4 } },

                               { { 6, 1, 8 }, 
                               { 7, 5, 3 }, 
                               { 2, 9, 4 } },

                               { { 8, 3, 4 }, 
                               { 1, 5, 9 }, 
                               { 6, 7, 2 } },

                               { { 2, 7, 6 }, 
                               { 9, 5, 1 }, 
                               { 4, 3, 8 } }
                               } ;
                               int min_op=1000;
    for(int i=0;i<8;i++){
        min_op=min(min_op,cost(s,mag[i]));
    }
    return min_op;
    
}




int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    vector<vector<int>> s(3);
    for (int i = 0; i < 3; i++) {
        s[i].resize(3);

        for (int j = 0; j < 3; j++) {
            cin >> s[i][j];
        }

        cin.ignore(numeric_limits<streamsize>::max(), '\n');
    }

    int result = formingMagicSquare(s);

    fout << result << "\n";

    fout.close();

    return 0;
}
